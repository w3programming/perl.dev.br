[
{
	"uri": "https://perl.dev.br/en/tutorial/",
	"title": "Tutorial",
	"tags": [],
	"description": "",
	"content": "Chapter 1 Perl Tutorial Learn the fundamentals of one of the most popular programming languages in the world. The tutorial is full of practical examples to simplify the understanding.\n Perl - Operators   "
},
{
	"uri": "https://perl.dev.br/en/tutorial/operators/",
	"title": "Perl - Operators",
	"tags": [],
	"description": "",
	"content": " Perl operators are symbols that represent a specific operation to be performed on one or more operands. Operators are used in expressions, which are statements that use values and operators to produce a value.\n Operators are a hugely important part of programming.\nThey tell your computer what you want it to do with a given input.\nNumeric operators Perl has a variety of numeric operators to help you manipulate numbers, including arithmetic, Boolean, and bitwise operations.\nArithmetic operators Perl has many built-in math operators that are used for basic arithmetic, such as addition +, subtraction -, multiplication *, and division /.\nThese operators can be used with numbers or strings of text to perform specific tasks.\nExample:\nAdding and subtracting values.\n#!/usr/bin/perl use strict; use warnings; print(10 + 10, \u0026#34;\\n\u0026#34;); print(120 - 30, \u0026#34;\\n\u0026#34;); print(1280 + 3567, \u0026#34;\\n\u0026#34;); print(123 - 2866, \u0026#34;\\n\u0026#34;); Output:\n20 90 4847 -2743 When you divide or multiply numbers in Perl, you use the divide / symbol and the multiply * symbol.\nThe order in which they are entered does not matter.\nExample:\nMultiplying and dividing values.\n#!/usr/bin/perl use strict; use warnings; print(10 * 10, \u0026#34;\\n\u0026#34;); print(120 / 10, \u0026#34;\\n\u0026#34;); print(1280 * 1.234, \u0026#34;\\n\u0026#34;); print(123 / 2866, \u0026#34;\\n\u0026#34;); Output:\n100 12 1579.52 0.0429169574319609 The multiplication and division operators have higher precedence than the add or subtract operators in Perl, therefore, when dealing with these two types of operations it will perform the calculations in order.\nIn order to understand what the interpreter is going to do when it executes a mathematical operation, you must know the order that it will perform operations in. This is known as operator precedence.\nIn computing, operator precedence is a set of rules that determines which operations should be performed first when multiple operations are performed at the same time.\nExample:\n#!/usr/bin/perl use strict; use warnings; print(10 * 10 - 2 / 3 + 14, \u0026#34;\\n\u0026#34;); Output:\n113.333333333333 You can use parentesis to force Perl to perform the calculation you want first.\nExample:\n#!/usr/bin/perl use strict; use warnings; print(10 * (10 - 2) / (3 + 14), \u0026#34;\\n\u0026#34;); Output:\n4.70588235294118 Raising a number to the power of another number in Perl When you want to raise a number to the power of another number, you use the exponentiation operator **.\nExample:\nIn this example, we want to raise 2 to the power of 4.\n#!/usr/bin/perl use strict; use warnings; print(2 ** 4, \u0026#34;\\n\u0026#34;); # 2 * 2 * 2 * 2 = 16 Output:\n16 Getting the remainder of the division in Perl A common mathematical operator we use every day is the modulo operator.\nThe modulo operator % is used to get the remainder of the division of one number by another.\nExample:\n#!/usr/bin/perl use strict; use warnings; print(13 % 4, \u0026#34;\\n\u0026#34;); print(20 % 7, \u0026#34;\\n\u0026#34;); print(100 % 13, \u0026#34;\\n\u0026#34;); Output:\n1 6 9 The modulo operator can be used to discover if a number is odd or even.\nThe remainder of an integer divided by two is 0 if the integer is even, and 1 if the integer is odd.\nExample:\n#!/usr/bin/perl use strict; use warnings; print(10 % 2, \u0026#34;\\n\u0026#34;); # 0 - Even print(13 % 2, \u0026#34;\\n\u0026#34;); # 1 - Odd Output:\n0 1 Comparing numeric values in Perl The Perl programming language provides all of the comparison operators for numbers.\n   Operator Description Example Result     == Equal 10 == 10 true   != Not Equal 10 != 10 false   \u0026lt; Less than 10 \u0026lt; 130 true   \u0026gt; Greater than 10 \u0026gt; 130 false   \u0026lt;= Less than or equal 10 \u0026lt;= 10 true   \u0026gt;= Greater than or equal 10 \u0026gt;= 2 true    There is one more operator in Perl used for numerical comparisons, the spaceship operator \u0026lt;=\u0026gt;.\nAlso known as the combined comparison operator, it returns 0 if the numbers are equal, 1 if the first one is greater, and -1 if the second one is greater.\nExample:\n#!/usr/bin/perl use strict; use warnings; my $x = 10; my $y = 20; print($x \u0026lt;=\u0026gt; $y, \u0026#34;\\n\u0026#34;); $y = 10; print($x \u0026lt;=\u0026gt; $y, \u0026#34;\\n\u0026#34;); $y = 5; print($x \u0026lt;=\u0026gt; $y, \u0026#34;\\n\u0026#34;); Output:\n-1 0 1 String operators in Perl String operators in Perl are used to manipulate and examine text strings.\nString comparison operators Perl has many string comparison operators to compare one string with another.\n   Operator Description Example Result     eq Equal \u0026ldquo;abc\u0026rdquo; eq \u0026ldquo;xyz\u0026rdquo; false   ne Not Equal \u0026ldquo;abc\u0026rdquo; ne \u0026ldquo;xyz\u0026rdquo; true   lt Less than \u0026ldquo;abc\u0026rdquo; lt \u0026ldquo;xyz\u0026rdquo; true   gt Greater than \u0026ldquo;abc\u0026rdquo; gt \u0026ldquo;xyz\u0026rdquo; false   le Less than or equal \u0026ldquo;abc\u0026rdquo; le \u0026ldquo;xyz\u0026rdquo; true   ge Greater than or equal \u0026ldquo;abc\u0026rdquo; ge \u0026ldquo;xyz\u0026rdquo; false   cmp Comparison \u0026ldquo;abc\u0026rdquo; cmp \u0026ldquo;xyz\u0026rdquo; -1    String concatenation operators String concatenation operators in Perl allow you to combine strings of text into a single string.\nExample:\n#!/usr/bin/perl use strict; use warnings; my $str1 = \u0026#34;Good\u0026#34;; my $str2 = \u0026#34;Morning.\u0026#34;; print($str1 . \u0026#34; \u0026#34; . $str2, \u0026#34;\\n\u0026#34;); Output:\nGood Morning. The \u0026ldquo;x\u0026rdquo; operator in Perl is a repetition operator. It repeats the given token or group of tokens x number of times.\nExample:\n#!/usr/bin/perl use strict; use warnings; my $str1 = \u0026#34;Perl\u0026#34;; print($str1 x 4, \u0026#34;\\n\u0026#34;); Output:\nPerlPerlPerlPerl Logical operators Logical operators are used for evaluating statements to produce a true or false value.\nThe following table lists the logical operators that Perl provides:\n   Operator Name Description     \u0026amp;\u0026amp; AND Evaluates its left operand and if it is true, evaluates its right operand, and returns the value of the right operand. If the left operand is false, it will not evaluate or return anything.   || OR Evaluates its left operand and if it is false, evaluates its right operand, and returns the value of the right operand. If the left operand is true, it will return the left operand value.   ! NOT Negates a statement that follows it. For example: !(3 \u0026gt; 2) would return false because 3 is greater than two, which returns true, so when using the NOT operator ! this value is inverted to false.    Example:\n#!/usr/bin/perl use warnings; use strict; print(1 \u0026amp;\u0026amp; 0, \u0026#34;\\n\u0026#34;); # false or 0 print(1 || 0, \u0026#34;\\n\u0026#34;); # true or 1 print( !(1 == 1) , \u0026#34;\\n\u0026#34;); # false or empty Output:\n0 1 In this tutorial, you learned about the fundamentals of Perl operators.\nThese operators are used in programming languages to manipulate data.\nIt\u0026rsquo;s important to understand them because they are used all the time in software development.\n"
},
{
	"uri": "https://perl.dev.br/en/categories/",
	"title": "Categories",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://perl.dev.br/en/",
	"title": "Perl Tutorial",
	"tags": [],
	"description": "",
	"content": "Learn Perl This tutorial covers the most fundamentals aspects of Perl for those who wants to learn how to unleash all the potential of this powerful and established programming language.\n It doesn\u0026rsquo;t matter if you are just starting out in Perl or are an experienced programmer, we\u0026rsquo;ve got you covered.\nThis tutorial starts out with the basics of Perl and advance to a more professional level. Learning Perl is easy, so you don\u0026rsquo;t have to worry about it. The lessons are bite-sized and short to allow you to learn at your own pace.\n"
},
{
	"uri": "https://perl.dev.br/en/tags/",
	"title": "Tags",
	"tags": [],
	"description": "",
	"content": ""
}]