[
{
	"uri": "https://perl.dev.br/en/tutorial/",
	"title": "Tutorial",
	"tags": [],
	"description": "",
	"content": "Chapter 1 Perl Tutorial Learn the fundamentals of one of the most popular programming languages in the world. The tutorial is full of practical examples to simplify the understanding.\n Introduction to Perl   Setting Up the Perl Development Environment   Developing the First Program in Perl   Perl - Operators   Perl - List   "
},
{
	"uri": "https://perl.dev.br/en/tutorial/introduction/",
	"title": "Introduction to Perl",
	"tags": [],
	"description": "",
	"content": "In this article you will learn about some important aspects of the Perl programming language. This is a first contact with characteristics that make up the language.\nPerl Features — Important Aspects of the Language Perl is one of the most popular and feature-rich programming languages ​​on the market. It has been developed and improved for over two decades. It has an active and participatory community in its development.\nPerl can run on an insane amount of platform. Compatible with most popular operating systems like Windows, Linux and MacOS, it becomes a wise choice for anyone who needs cross-platform portability.\nPerl currently supports over 100 different platforms.\nBut what can Perl be used for?\nPerl is a versatile language. It can be used in both mission-critical and smaller projects, or even very simple one-line scripts.\nPerl\u0026rsquo;s Most Important Features — Language Highlights 1. Extensible programming language Perl has a module repository called CPAN\u0026nbsp;\r, short for Comprehensive Perl Archive Network , in it you can find hundreds of thousands of extensions for the language.\nIf you need a module that performs a certain task, chances are, someone in the community has already developed it.\nModules range from graphical user interface UIs to integration with the most popular database managers .\nPerl provides support for the most popular databases for programmers like MySQL, Oracle, PostgresSQL and more.\n2. Ease of use and learning Despite some controversies regarding Perl, the language is very easy to learn.\nIn addition to having a huge and helpful community\u0026nbsp;\r, you can still find thousands of tutorials available for free on the internet.\nPerl also has documentation\u0026nbsp;\r very detailed and easy to understand. The language stands out for its efficiency in performing complex tasks.\n3. Versatility One of the most important features of any programming language is its versatility regarding programming paradigms.\nObject-oriented, procedural programming, or functional programming , all of these programming paradigms are supported by Perl.\nThis allows the programmer the freedom to develop their programs using the paradigm that best fits their projects.\n4. Regular expression When we talk about text manipulation, Perl is on another level. We can say that the language is the precursor of regular expressions.\nRegular expression or regex is a powerful system used to find text occurrences in various types of content. You will learn much more about this system as the tutorial progresses.\nPerl has a set of built-in APIs used specifically for text processing. With them it is much easier to manipulate files generated from markup languages ​​such as XML and HTML.\nPerl\u0026rsquo;s regex engine needs no comments. With a robust system, Perl\u0026rsquo;s regex can be used to find specific files on systems through complex combinations.\n5. Open source An open source project allows the user to access, change and even distribute it freely and freely.\nPerl has been developed since its inception as an open source project. You can download Perl, change it, and freely distribute it using one of the GNU, GPL, or artistic licenses.\nThe language still has support for commercial use.\n6. Quality and safety Language security is essential when we talk about programming.\nPerl is certified by Coverity free of security flaws. The language core also has low defect density.\nThis allows the user to have more confidence in developing their programs using Perl.\nDifferent Perl Versions — Version 5 x Version 6 It is worth noting here that Perl has two major versions that generate confusion among users.\nUntil version 5 of Perl, the language is still called Perl. Version 6, however, differed so much from Perl that it became another language, known as Raku\u0026nbsp;\r.\nRaku can be considered a fully object-oriented implementation of Perl.\nIn our tutorial we are going to use Perl version 5.3.\nWho invented Perl? Perl was first introduced in 1987 by programmer Larry Wall.\nHe was a systems administrator at NASA and needed a language to process reports more efficiently. The first version of Perl was created and run on the UNIX operating system.\nFor more than two decades Perl has been developed and improved by an active and dedicated community of programmers.\n"
},
{
	"uri": "https://perl.dev.br/en/tutorial/development-environment/",
	"title": "Setting Up the Perl Development Environment",
	"tags": [],
	"description": "",
	"content": "In this tutorial we are going to install Perl and everything else necessary to start programming in this language.\nTo program in Perl it\u0026rsquo;s necessary to install the programming language distribution application and a simple text editor.\nStrawberry Perl — What is it and how to download it Strawberry Perl is a Perl development environment for Microsoft Windows.\nStrawberry Perl contains all the requirements needed to run Perl scripts.\nStrawberry Perl can be downloaded directly from the official website https://strawberryperl.com\u0026nbsp;\r.\nAfter downloading it, just run the installer application.\nInstalling Strawberry Perl on Windows — Step by Step with Images  Right after running the Strawberry Perl installer, the window below appears. Click the NEXT button to continue.  \r\rRead and accept the program terms by clicking the I accept the terms in the license agreement checkbox and then the next button  \r\rSelect the application installation location. By default, it is suggested to install Strawberry Perl in the C:\\Strawberry folder. If in doubt where to install it, leave this default folder.  \r\rWith the whole system configured, just click the Install button to start the software installation.  \r\rNow, just wait for the installation to complete.  \r\rAfter completing the Strawberry Perl installation, the following screen appears. Finish the installer by clicking the finish button.  \r\rPerl installation confirmation To confirm that Perl has been properly installed on your computer, follow these steps:\n Open a Windows command prompt and type the command perl -v. Press Enter to execute the command. Check if the command outputs the Perl version installed on your computer as shown in the image below.  \r\rIf the command returns something like this:\n\u0026#39;perl\u0026#39; is not recognized as an internal or external command, operable program or batch file. or\n\u0026#39;perl\u0026#39; is not recognized as an internal command... …it is necessary to verify if the directory C:\\Strawberry\\perl\\bin has been added to the windows PATH environment variable.\nYou can add the Perl directory to the PATH environment variable using the command:\nsetx path \u0026#34;%path%;C:\\Strawberry\\perl\\bin\u0026#34; Installing a Text Editor — Also Known as a Code Editor Perl scripts are plain text.\nPerl scripts can be edited in any plain text editor.\nTo make programming in Perl easier, it\u0026rsquo;s recommended to install an editor that has features such as syntax highlighting and autocompletion.\nThe editor options are many. I recommend using Visual Studio Code.\nTo download it, just visit the official website at https://code.visualstudio.com\u0026nbsp;\r.\nInstalling Visual Studio Code is quite simple and straightforward. Run the installer and follow the steps presented by the program.\n  If you want to try other editor options, you can try Sublime Text\u0026nbsp;\r or the Atom\u0026nbsp;\r. Two of the most popular code editors among programmers. Notepad\u0026#43;\u0026#43;\u0026nbsp;\r is also a good option.\n "
},
{
	"uri": "https://perl.dev.br/en/tutorial/first-program/",
	"title": "Developing the First Program in Perl",
	"tags": [],
	"description": "",
	"content": " Perl scripts are plain text.\n Despite its simplicity, Perl scripts can perform complex tasks.\n First, create a folder called perl-scripts in the C: root directory. Open your favorite text editor to create the first Perl script. Create a new file and enter the code below:  #!/usr/bin/perl use warnings; print(\u0026#34;Hello, World!\\n\u0026#34;);  Save the file with the name HELLO.PL to the perl-scripts folder.  Running a script in Perl To run a Perl script, open a command prompt in Windows.\nNavigate to the folder where the script is located.\nIn our case the folder is located at c:\\perl-scripts. To place the prompt inside this folder, type the command cd c:\\perl-scripts and press the ENTER key.\n Run the command:\nperl hello.pl Output:\nHello, World! If you see this result on the screen, congratulations you have just created and successfully run your first Perl script.\nExplaining the script — In detail Let\u0026rsquo;s go through each line of our first Perl program to understand how it works.\n#!/usr/bin/perl The first line tells the shell that this script should be run using the Perl interpreter.\nThe address /usr/bin/perl is exactly where the interpreter is located.\nuse warnings; The second line of the script includes a Pragma.\nThis Pragma tells the Perl interpreter that additional warnings should be displayed to the user when something happens in the code.\nAnother very important Pragma used in Perl is use stricts. We\u0026rsquo;ll see more about it as the tutorial progresses.\n print(\u0026#34;Hello, World!\\n\u0026#34;); The third line of the script contains a function called print.\nThis function places a value on the screen.\nIn this case, the value is whatever is inside the parentheses.\n\u0026quot;Hello, World!\\n\u0026quot; represents a string in Perl.\nStrings in Perl are enclosed in quotes \u0026quot;\u0026quot;.\nThroughout the tutorial, you will learn more about strings in Perl.\nThe sequence \\n within the string represents a newline for the Perl interpreter.\nThe \\n is known as the escape sequence.\n"
},
{
	"uri": "https://perl.dev.br/en/tutorial/operators/",
	"title": "Perl - Operators",
	"tags": [],
	"description": "",
	"content": " Perl operators are symbols that represent a specific operation to be performed on one or more operands. Operators are used in expressions, which are statements that use values and operators to produce a value.\n Operators are a hugely important part of programming.\nThey tell your computer what you want it to do with a given input.\nNumeric operators Perl has a variety of numeric operators to help you manipulate numbers, including arithmetic, Boolean, and bitwise operations.\nArithmetic operators Perl has many built-in math operators that are used for basic arithmetic, such as addition +, subtraction -, multiplication *, and division /.\nThese operators can be used with numbers or strings of text to perform specific tasks.\nExample:\nAdding and subtracting values.\n#!/usr/bin/perl use strict; use warnings; print(10 + 10, \u0026#34;\\n\u0026#34;); print(120 - 30, \u0026#34;\\n\u0026#34;); print(1280 + 3567, \u0026#34;\\n\u0026#34;); print(123 - 2866, \u0026#34;\\n\u0026#34;); Output:\n20 90 4847 -2743 When you divide or multiply numbers in Perl, you use the divide / symbol and the multiply * symbol.\nThe order in which they are entered does not matter.\nExample:\nMultiplying and dividing values.\n#!/usr/bin/perl use strict; use warnings; print(10 * 10, \u0026#34;\\n\u0026#34;); print(120 / 10, \u0026#34;\\n\u0026#34;); print(1280 * 1.234, \u0026#34;\\n\u0026#34;); print(123 / 2866, \u0026#34;\\n\u0026#34;); Output:\n100 12 1579.52 0.0429169574319609 The multiplication and division operators have higher precedence than the add or subtract operators in Perl, therefore, when dealing with these two types of operations it will perform the calculations in order.\nIn order to understand what the interpreter is going to do when it executes a mathematical operation, you must know the order that it will perform operations in. This is known as operator precedence.\nIn computing, operator precedence is a set of rules that determines which operations should be performed first when multiple operations are performed at the same time.\nExample:\n#!/usr/bin/perl use strict; use warnings; print(10 * 10 - 2 / 3 + 14, \u0026#34;\\n\u0026#34;); Output:\n113.333333333333 You can use parentesis to force Perl to perform the calculation you want first.\nExample:\n#!/usr/bin/perl use strict; use warnings; print(10 * (10 - 2) / (3 + 14), \u0026#34;\\n\u0026#34;); Output:\n4.70588235294118 Raising a number to the power of another number in Perl When you want to raise a number to the power of another number, you use the exponentiation operator **.\nExample:\nIn this example, we want to raise 2 to the power of 4.\n#!/usr/bin/perl use strict; use warnings; print(2 ** 4, \u0026#34;\\n\u0026#34;); # 2 * 2 * 2 * 2 = 16 Output:\n16 Getting the remainder of the division in Perl A common mathematical operator we use every day is the modulo operator.\nThe modulo operator % is used to get the remainder of the division of one number by another.\nExample:\n#!/usr/bin/perl use strict; use warnings; print(13 % 4, \u0026#34;\\n\u0026#34;); print(20 % 7, \u0026#34;\\n\u0026#34;); print(100 % 13, \u0026#34;\\n\u0026#34;); Output:\n1 6 9 The modulo operator can be used to discover if a number is odd or even.\nThe remainder of an integer divided by two is 0 if the integer is even, and 1 if the integer is odd.\nExample:\n#!/usr/bin/perl use strict; use warnings; print(10 % 2, \u0026#34;\\n\u0026#34;); # 0 - Even print(13 % 2, \u0026#34;\\n\u0026#34;); # 1 - Odd Output:\n0 1 Comparing numeric values in Perl The Perl programming language provides all of the comparison operators for numbers.\n   Operator Description Example Result     == Equal 10 == 10 true   != Not Equal 10 != 10 false   \u0026lt; Less than 10 \u0026lt; 130 true   \u0026gt; Greater than 10 \u0026gt; 130 false   \u0026lt;= Less than or equal 10 \u0026lt;= 10 true   \u0026gt;= Greater than or equal 10 \u0026gt;= 2 true    There is one more operator in Perl used for numerical comparisons, the spaceship operator \u0026lt;=\u0026gt;.\nAlso known as the combined comparison operator, it returns 0 if the numbers are equal, 1 if the first one is greater, and -1 if the second one is greater.\nExample:\n#!/usr/bin/perl use strict; use warnings; my $x = 10; my $y = 20; print($x \u0026lt;=\u0026gt; $y, \u0026#34;\\n\u0026#34;); $y = 10; print($x \u0026lt;=\u0026gt; $y, \u0026#34;\\n\u0026#34;); $y = 5; print($x \u0026lt;=\u0026gt; $y, \u0026#34;\\n\u0026#34;); Output:\n-1 0 1 String operators in Perl String operators in Perl are used to manipulate and examine text strings.\nString comparison operators Perl has many string comparison operators to compare one string with another.\n   Operator Description Example Result     eq Equal \u0026ldquo;abc\u0026rdquo; eq \u0026ldquo;xyz\u0026rdquo; false   ne Not Equal \u0026ldquo;abc\u0026rdquo; ne \u0026ldquo;xyz\u0026rdquo; true   lt Less than \u0026ldquo;abc\u0026rdquo; lt \u0026ldquo;xyz\u0026rdquo; true   gt Greater than \u0026ldquo;abc\u0026rdquo; gt \u0026ldquo;xyz\u0026rdquo; false   le Less than or equal \u0026ldquo;abc\u0026rdquo; le \u0026ldquo;xyz\u0026rdquo; true   ge Greater than or equal \u0026ldquo;abc\u0026rdquo; ge \u0026ldquo;xyz\u0026rdquo; false   cmp Comparison \u0026ldquo;abc\u0026rdquo; cmp \u0026ldquo;xyz\u0026rdquo; -1    String concatenation operators String concatenation operators in Perl allow you to combine strings of text into a single string.\nExample:\n#!/usr/bin/perl use strict; use warnings; my $str1 = \u0026#34;Good\u0026#34;; my $str2 = \u0026#34;Morning.\u0026#34;; print($str1 . \u0026#34; \u0026#34; . $str2, \u0026#34;\\n\u0026#34;); Output:\nGood Morning. The \u0026ldquo;x\u0026rdquo; operator in Perl is a repetition operator. It repeats the given token or group of tokens x number of times.\nExample:\n#!/usr/bin/perl use strict; use warnings; my $str1 = \u0026#34;Perl\u0026#34;; print($str1 x 4, \u0026#34;\\n\u0026#34;); Output:\nPerlPerlPerlPerl Logical operators Logical operators are used for evaluating statements to produce a true or false value.\nThe following table lists the logical operators that Perl provides:\n   Operator Name Description     \u0026amp;\u0026amp; AND Evaluates its left operand and if it is true, evaluates its right operand, and returns the value of the right operand. If the left operand is false, it will not evaluate or return anything.   || OR Evaluates its left operand and if it is false, evaluates its right operand, and returns the value of the right operand. If the left operand is true, it will return the left operand value.   ! NOT Negates a statement that follows it. For example: !(3 \u0026gt; 2) would return false because 3 is greater than two, which returns true, so when using the NOT operator ! this value is inverted to false.    Example:\n#!/usr/bin/perl use warnings; use strict; print(1 \u0026amp;\u0026amp; 0, \u0026#34;\\n\u0026#34;); # false or 0 print(1 || 0, \u0026#34;\\n\u0026#34;); # true or 1 print( !(1 == 1) , \u0026#34;\\n\u0026#34;); # false or empty Output:\n0 1 In this tutorial, you learned about the fundamentals of Perl operators.\nThese operators are used in programming languages to manipulate data.\nIt\u0026rsquo;s important to understand them because they are used all the time in software development.\n"
},
{
	"uri": "https://perl.dev.br/en/tutorial/list/",
	"title": "Perl - List",
	"tags": [],
	"description": "",
	"content": "A Perl list is a data type that can store an ordered sequence of values.\nA list is composed of items, called list elements.\nEach list element is a set of values, and these values are indexed and ordered.\nExample:\n() (1, 2, 3) (\u0026#34;Perl\u0026#34;, \u0026#34;Programming\u0026#34;, \u0026#34;Code\u0026#34;) (4, 5) (1, \u0026#34;hi\u0026#34;) (\u0026#34;hi\u0026#34;, 1, 2, \u0026#34;bye\u0026#34;) Simple Perl list Complex Perl list Flattening lists in Perl Flattening list in Perl is a process of converting nested lists to single-level lists.\nThe flattening process consists of two steps:\n Flattening: The first step is flattening the list into a new list. Appending: The second step is appending the flattened list to the original list.  Example:\nAccessing list elements in Perl The index of a list is the number that you use to access an element in the list.\nIf you want to access the second element in a list, then you would use an index of 1.\nThis system is called zero-based indexing, and it is used instead of one-based indexing because with zero-based indexing, lists can be indexed from 0 to n - 1, where n is the total amount of elements inside the list.\nExample:\n$items = (\u0026ldquo;apple\u0026rdquo;, \u0026ldquo;orange\u0026rdquo;, \u0026ldquo;banana\u0026rdquo;);\n$item = $items[0];\nprint(\u0026ldquo;The first item in the list is: $item\u0026rdquo;);\nOutput:\nThe first item in the list is: apple\nBuild a list based on a range In Perl, you can build lists based on ranges of numbers or characters.\nExample:\nThe following Perl code will generate a list (the number 1 through 10) and store it in the variable \u0026ldquo;numbers\u0026rdquo;.\nmy $number = (1..10); Example:\nThe code below will generate the list (a-z) and store it in the variable \u0026ldquo;letters\u0026rdquo;.\nmy $number = (a..z); "
},
{
	"uri": "https://perl.dev.br/en/categories/",
	"title": "Categories",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://perl.dev.br/en/",
	"title": "Learn Perl",
	"tags": [],
	"description": "",
	"content": "Learn Perl This tutorial covers the most fundamentals aspects of Perl for those who wants to learn how to unleash all the potential of this powerful and established programming language.\n It doesn\u0026rsquo;t matter if you are just starting out in Perl or are an experienced programmer, we\u0026rsquo;ve got you covered.\nThis tutorial starts out with the basics of Perl and advance to a more professional level. Learning Perl is easy, so you don\u0026rsquo;t have to worry about it. The lessons are bite-sized and short to allow you to learn at your own pace.\n"
},
{
	"uri": "https://perl.dev.br/en/tags/",
	"title": "Tags",
	"tags": [],
	"description": "",
	"content": ""
}]