[
{
	"uri": "https://perl.dev.br/tutorial/",
	"title": "Tutorial",
	"tags": [],
	"description": "",
	"content": "Capítulo 1 Tutorial de Perl Aprenda todos os conceitos fundamentais de umas das linguagens mais populares do mundo. O Tutorial é recheado de exemplos práticos e simples para facilitar o entendimento do usuário.\n Introdução ao Perl   Configurando o ambiente de desenvolvimento do Perl   Desenvolvendo o primeiro programa em Perl   Perl - Sintaxe   Perl - Variáveis   "
},
{
	"uri": "https://perl.dev.br/reference/",
	"title": "Documentação Completa do Perl",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://perl.dev.br/tutorial/introduction/",
	"title": "Introdução ao Perl",
	"tags": [],
	"description": "",
	"content": "Neste artigo você conhecerá alguns aspectos importantes da linguagem de programação Perl. Esse é um primeiro contato com características que compõem a linguagem.\nCaracterísticas do Perl — Aspectos importantes da linguagem Perl é uma das linguagens de programação mais populares e ricas em recursos do mercado. Ela vem sendo desenvolvida e aprimorada por mais de duas décadas. Conta com uma comunidade ativa e participativa em seu desenvolvimento.\nO Perl pode ser executado em uma quantidade absurda de plataforma. Compatível com sistemas operacionais mais populares como Windows, Linux e MacOS, ele se torna uma escolha acertada para quem precisa de portabilidade multiplataforma.\n No momento o Perl é compatível com mais de 100 plataformas diferentes.\n Mas para que o Perl pode ser utilizado?\nO Perl é uma linguagem versátil. Pode ser usado tanto em projeto de missão crítica como para projetos menores, ou até scripts bem simples de apenas uma linha.\nOs Recursos Mais Importantes do Perl — Destaques da linguagem 1. Linguagem de programação extensível O Perl possui um repositório de módulos chamado CPAN\u0026nbsp;\r, abreviação de Comprehensive Perl Archive Network, nele é possível encontrar centenas de milhares de extensões para a linguagem.\nSe você precisa de algum módulo que execute uma determinada tarefa, é bem provável que alguém na comunidade já o tenha desenvolvido.\nOs módulos incluem desde interfaces gráficas com o usuário UIs até integração com os gerenciadores de banco de dados mais populares.\n O Perl fornece suporte para os bancos de dados mais conhecidos pelos programadores como MySQL, Oracle, PostgresSQL e muito mais.\n 2. Facilidade de uso e aprendizado Apesar de algumas controvérsias em relação ao Perl, a linguagem é muito fácil de ser aprendida.\nAlém de contar com uma comunidade enorme e prestativa\u0026nbsp;\r, ainda é possível encontrar milhares de tutoriais disponíveis de graça pela internet.\nO Perl conta ainda com uma documentação\u0026nbsp;\r bem detalhada e fácil de entender. A linguagem se destaca pela sua eficiência em executar tarefas complexas.\n3. Versatilidade Um dos recursos mais importantes de qualquer linguagem de programação é a sua versatilidade em relação a paradigmas de programação.\nOrientação a objetos, programação procedural ou programação funcional, todos esses paradigmas de programação são suportados pelo Perl.\nIsso permite ao programador ter a liberdade para desenvolver seus programas usando o paradigma que melhor se encaixa em seus projetos.\n4. Expressão regular Quando falamos em manipulação de texto o Perl está em outro nível. Podemos dizer que a linguagem é a precursora das expressões regulares.\n Expressão regular ou regex é um sistema poderoso usado para encontrar ocorrências de texto em diversos tipos de conteúdos. Você aprenderá muito mais sobre esse sistema no decorrer do tutorial.\n O Perl possui um conjunto de APIs internas usadas especificamente para processamento de texto. Com elas é bem mais fácil manipular arquivos gerados a partir de linguagens de marcação como XML e HTML.\nJá o motor de regex do Perl dispensa comentários. Com um sistema robusto, o regex do Perl pode ser usado para encontrar arquivos específicos em sistemas através de combinações complexas.\n5. Código aberto Um projeto de código aberto permite ao usuário acessar, alterar e até distribuí-lo de forma livre e gratuita.\nO Perl foi desenvolvido desde de a sua criação como um projeto de código aberto. Você pode baixar o Perl, alterá-lo e distribuí-lo de forma livre usando uma das licenças GNU, GPL ou uma licença artística.\nA linguagem ainda conta com suporte para o uso comercial.\n6. Qualidade e segurança A segurança da linguagem é algo indispensável quando falamos em programação.\nO Perl é certificado pela Coverity com livre de falhas de segurança. O núcleo da linguagem também tem baixa densidade de defeitos.\nIsso permite ao usuário ter mais confiança em desenvolver seus programas usando o Perl.\nDiferentes Versões do Perl — Versão 5 x Versão 6 Vale destacar aqui que o Perl conta com duas versões majoritárias que geram confusão nos usuários.\nAté a versão 5 do Perl, a linguagem ainda é chamada de Perl. Já a versão 6, se diferenciou tanto do Perl, que se tornou outra linguagem, conhecida como Raku\u0026nbsp;\r.\nO Raku pode ser considerado uma implementação do Perl totalmente orientada a objetos.\n No nosso tutorial nós vamos usar a versão 5.3 do Perl.\nQuem inventou o Perl? O Perl teve sua primeira versão apresentada em 1987 pelo programador Larry Wall.\nEle era administrador de sistemas na NASA e precisava de uma linguagem para processar relatórios de forma mais eficiente. A primeira versão do Perl foi criada e rodada no sistema operacional UNIX.\nDurante mais de duas décadas o Perl vem sendo desenvolvido e aprimorado por uma comunidade ativa e dedicada de programadores.\n"
},
{
	"uri": "https://perl.dev.br/reference/keywords/",
	"title": "Palavras-chave do Perl",
	"tags": [],
	"description": "",
	"content": "Nesta página você encontrará uma referência completa para todas as palavras-chave do Perl e o que cada uma delas representa para a linguagem.\nUma palavra-chave representa um termo reservado da linguagem de programação.\n No Perl é possível sobreescrever as palavras-chave, mas isso é uma prática não recomendada. Sobrescrever palavras-chaves podem gerar erros de lógica muito difíceis de serem depurados.\n Funções internas do Perl    Palavra-chave Definição     -A    -B    -b    -C    -c    -d    -e    -f    -g    -k    -l    -M    -O    -o    -p    -r    -R    -S    -s    -T    -t    -u    -w    -W    -X    -x    -z    abs    accept    alarm    atan2    AUTOLOAD    BEGIN    bind    binmode    bless    break    caller    chdir    CHECK    chmod    chomp    chop    chown    chr    chroot    close    closedir    connect    cos    crypt    dbmclose    dbmopen    defined    delete    DESTROY    die    dump    each    END    endgrent    endhostent    endnetent    endprotoent    endpwent    endservent    eof    eval    exec    exists    exit    fcntl    fileno    flock    fork    format    formline    getc    getgrent    getgrgid    getgrnam    gethostbyaddr    gethostbyname    gethostent    getlogin    getnetbyaddr    getnetbyname    getnetent    getpeername    getpgrp    getppid    getpriority    getprotobyname    getprotobynumber    getprotoent    getpwent    getpwnam    getpwuid    getservbyname    getservbyport    getservent    getsockname    getsockopt    glob    gmtime    goto    grep    hex    index    INIT    int    ioctl    join    keys    kill    last    lc    lcfirst    length    link    listen    local    localtime    log    lstat    map    mkdir    msgctl    msgget    msgrcv    msgsnd    my    next    not    oct    open    opendir    ord    our    pack    pipe    pop    pos    print    printf    prototype    push    quotemeta    rand    read    readdir    readline    readlink    readpipe    recv    redo    ref    rename    require    reset    return    reverse    rewinddir    rindex    rmdir    say    scalar    seek    seekdir    select    semctl    semget    semop    send    setgrent    sethostent    setnetent    setpgrp    setpriority    setprotoent    setpwent    setservent    setsockopt    shift    shmctl    shmget    shmread    shmwrite    shutdown    sin    sleep    socket    socketpair    sort    splice    split    sprintf    sqrt    srand    stat    state    study    substr    symlink    syscall    sysopen    sysread    sysseek    system    syswrite    tell    telldir    tie    tied    time    times    truncate    uc    ucfirst    umask    undef    UNITCHECK    unlink    unpack    unshift    untie    use    utime    values    vec    wait    waitpid    wantarray    warn    write     Sintaxe interna do Perl    Palavra-chave Descrição     __DATA__    __END__    __FILE__    __LINE__    __PACKAGE__    and    cmp    continue    CORE    do    else    elsif    eq    exp    for    foreach    ge    gt    if    le    lock    lt    m    ne    no    or    package    q    qq    qr    qw    qx    s    sub    tr    unless    until    while    xor    y     Variáveis internas do Perl    Palavra-chave Descrição     $!    $\u0026quot;    $#    $$    $%    $\u0026amp;    $'    $(    $    $*    $+    $    $-    $.    $/    $0    $:    $;    $\u0026lt;    $=    $\u0026gt;    $?    $@    $[    $|    $    $^    $^A    $^C    $^CHILD_ERROR_NATIVE    $^D    $^E    $^ENCODING    $^F    $^H    $^I    $^L    $^M    $^N    $^O    $^OPEN    $^P    $^R    $^RE_DEBUG_FLAGS    $^RE_TRIE_MAXBUF    $^S    $^T    $^TAINT    $^UNICODE    $^UTF8LOCALE    $^V    $^W    $^WARNING_BITS    $^WIDE_SYSTEM_CALLS    $^X    $_    $`    $a    $ACCUMULATOR    $ARG    $ARGV    $b    $BASETIME    $CHILD_ERROR    $COMPILING    $DEBUGGING    $EFFECTIVE_GROUP_ID    $EFFECTIVE_USER_ID    $EGID    $ERRNO    $EUID    $EVAL_ERROR    $EXCEPTIONS_BEING_CAUGHT    $EXECUTABLE_NAME    $EXTENDED_OS_ERROR    $FORMAT_FORMFEED    $FORMAT_LINE_BREAK_CHARACTERS    $FORMAT_LINES_LEFT    $FORMAT_LINES_PER_PAGE    $FORMAT_NAME    $FORMAT_PAGE_NUMBER    $FORMAT_TOP_NAME    $GID    $INPLACE_EDIT    $INPUT_LINE_NUMBER    $INPUT_RECORD_SEPARATOR    $LAST_MATCH_END    $LAST_PAREN_MATCH    $LAST_REGEXP_CODE_RESULT    $LIST_SEPARATOR    $MATCH    $MULTILINE_MATCHING    $NR    $OFMT    $OFS    $ORS    $OS_ERROR    $OSNAME    $OUTPUT_AUTO_FLUSH    $OUTPUT_FIELD_SEPARATOR    $OUTPUT_RECORD_SEPARATOR    $PERL_VERSION    $PERLDB    $PID    $POSTMATCH    $PREMATCH    $PROCESS_ID    $PROGRAM_NAME    $REAL_GROUP_ID    $REAL_USER_ID    $RS    $SUBSCRIPT_SEPARATOR    $SUBSEP    $SYSTEM_FD_MAX    $UID    $WARNING    $    $~    %!    %^H    %ENV    %INC    %OVERLOAD    %SIG    @+    @-    @_    @ARGV    @INC    @LAST_MATCH_START     Manipuladores de arquivos do Perl    Palavra-chave Descrição     ARGV    ARGVOUT    STDERR    STDIN    STDOUT     Outras palavras-chave do Perl    Palavra-chave Descrição     %+    %-    1    2    3    4    5    6    7    8    9    :bytes    :crlf    :mmap    :perlio    :pop    :raw    :stdio    :unix    :utf8    :win32    @F    _    __DIE__    __WARN__    a    abs2rel    ACCUMULATOR    ARG    b    back    basename    BASETIME    begin    builder    can    can_ok    canonpath    carp    case_tolerant    catdir    catfile    catpath    CHILD_ERROR    CHILD_ERROR_NATIVE    CLEAR    CLOSE    cluck    cmp_ok    COMPILING    confess    copy    cp    croak    curdir    cut    DATA    DEBUGGING    DELETE    devnull    diag    dirname    EFFECTIVE_GROUP_ID    EFFECTIVE_USER_ID    EGID    ENCODING    end    ENV    eq_array    eq_hash    eq_set    ERRNO    EUID    EVAL_ERROR    EXCEPTIONS_BEING_CAUGHT    EXECUTABLE_NAME    EXISTS    EXTEND    EXTENDED_OS_ERROR    fail    FETCH    FETCHSIZE    file_name_is_absolute    fileparse    fileparse_set_fstype    find    finddepth    FIRSTKEY    FORMAT_FORMFEED    FORMAT_LINE_BREAK_CHARACTERS    FORMAT_LINES_LEFT    FORMAT_LINES_PER_PAGE    FORMAT_NAME    FORMAT_PAGE_NUMBER    FORMAT_TOP_NAME    freeze    GETC    GetOptions    GID    head1    head2    head3    head4    HOME    INC    INPLACE_EDIT    INPUT_LINE_NUMBER    INPUT_RECORD_SEPARATOR    is    is_deeply    ISA    isa    isa_ok    isnt    item    LAST_MATCH_END    LAST_MATCH_START    LAST_PAREN_MATCH    LAST_REGEXP_CODE_RESULT    LAST_SUBMATCH_RESULT    like    LIST_SEPARATOR    LOGDIR    longmess    MATCH    mkdtemp    mkpath    mkstemp    mkstemps    mktemp    move    MULTILINE_MATCHING    mv    NEXTKEY    no_upwards    NR    OFS    ok    OPEN    ORS    OS_ERROR    OSNAME    OUTPUT_AUTOFLUSH    OUTPUT_FIELD_SEPARATOR    OUTPUT_RECORD_SEPARATOR    over    pass    PATH    path    PERL5DB    PERL5DB_THREADED    PERL5LIB    PERL5OPT    PERL5SHELL    PERL_ALLOW_NON_IFS_LSP    PERL_DEBUG_MSTATS    PERL_DESTRUCT_LEVEL    PERL_DL_NONLAZY    PERL_ENCODING    PERL_HASH_SEED    PERL_HASH_SEED_DEBUG    PERL_ROOT    PERL_SIGNALS    PERL_UNICODE    PERL_VERSION    PERLDB    PERLIO    PERLIO_DEBUG    PERLLIB    PID    plan    pod    POP    POSTMATCH    PREMATCH    PRINT    PRINTF    PROCESS_ID    PROGRAM_NAME    PUSH    RE_DEBUG_FLAGS    RE_TRIE_MAXBUF    READ    READLINE    REAL_GROUP_ID    REAL_USER_ID    rel2abs    require_ok    rmscopy    rmtree    rootdir    RS    safe_level    SHIFT    shortmess    SIG    skip    SKIP    SPLICE    splitdir    splitpath    STORE    STORESIZE    SUBSCRIPT_SEPARATOR    SUBSEP    SYSTEM_FD_MAX    TAINT    tempdir    tempfile    thaw    TIEARRAY    TIEHANDLE    TIEHASH    TIESCALAR    tmpdir    tmpfile    tmpnam    TODO    todo_skip    UID    UNICODE    unlike    unlink0    UNSHIFT    UNTIE    updir    use_ok    UTF8CACHE    UTF8LOCALE    VERSION    WARNING    WARNING_BITS    WIN32_SLOPPY_STAT    WRITE     "
},
{
	"uri": "https://perl.dev.br/tutorial/development-environment/",
	"title": "Configurando o ambiente de desenvolvimento do Perl",
	"tags": [],
	"description": "",
	"content": "Nesse tutorial nós vamos instalar o Perl e tudo o que for necessário para começar a programar nesta linguagem.\nPara programar em Pel é necessário instalar o aplicativo de distribuição da linguagem e um editor de texto simples.\nStrawberry Perl — O que é e como baixá-lo O Strawberry Perl é um ambiente de desenvolvimento Perl para o Microsoft Windows.\nO Strawberry Perl contém todos os requisitos necessários para executar scripts em Perl.\nO Strawberry Perl pode ser baixado diretamente do site oficial https://strawberryperl.com\u0026nbsp;\r.\nApós o download, basta executar o aplicativo de instalação.\n Instalando o Strawberry Perl no Windows — Passo a Passo com imagens  Logo após executar o instalador do Strawberry Perl, a janela abaixo é apresentada. Clique no botão Next para continuar.  Leia e aceite os termos do programa clicando na caixa de seleção I accept the terms in the License Agreement e em seguida no botão Next  Selecione o local de instalação do aplicativo. Por padrão, é sugerido instalar o Strawberry Perl na pasta c:\\Strawberry. Se tiver em dúvida de onde instalá-lo, deixa essa pasta padrão mesmo.  Com o sistema todo configurado, basta clicar no botão Install para iniciar a instalação do software.  Agora, basta aguardar a finalização da instalação.  Após completar a instalação do Strawberry Perl, a seguinte tela é apresentada. Finalize o instalador clicando no botão Finish.  Confirmação da instalação do Perl Para confirmar se o Perl foi devidamente instalado no seu computador, siga os seguintes passos:\n Abra um prompt de comando do Windows e digite o comando perl -v. Pressiona a tecla Enter para executar o comando. Verifique se a saída do comando indica a versão do Perl instalado no computador como na imagem abaixo.  Caso retorno do comando seja algo do tipo:\n\u0026#39;perl\u0026#39; is not recognized as an internal or external command, operable program or batch file. ou\n\u0026#39;perl\u0026#39; não é reconhecido como um comando interno... \u0026hellip;é necessário verificar se o diretório C:\\Strawberry\\perl\\bin foi inserido na variável de ambiente PATH do windows.\nVocê pode inserir o diretório do Perl na variável de ambiente PATH usando o comando:\nsetx path \u0026#34;%path%;C:\\Strawberry\\perl\\bin\u0026#34; Instalando um editor de texto — Também conhecido como editor de código Os scripts em Perl são textos simples.\nOs scripts em Perl podem ser editados em qualquer editor de texto simples.\nPara facilitar a programação em Perl, é recomendável instalar um editor que possua recursos como detaque de sintaxe e autocompletar.\nAs opções de editores são várias. Eu recomendo usar o Visual Studio Code.\nPara baixá-lo, basta visitar o site oficial em https://code.visualstudio.com\u0026nbsp;\r\nA instalação do Visual Studio Code é bem simples e direta. Clicando no instalador e seguindo as etapas apresentadas pelo programa.\n  Caso queira experimentar outras opções de editores, você pode testar o Sublime Text\u0026nbsp;\r ou o Atom\u0026nbsp;\r. Dois dos mais populares editores de código entre programadores. O Notepad\u0026#43;\u0026#43;\u0026nbsp;\r também é uma boa opção.\n "
},
{
	"uri": "https://perl.dev.br/tutorial/first-program/",
	"title": "Desenvolvendo o primeiro programa em Perl",
	"tags": [],
	"description": "",
	"content": " Os programas em Perl são textos simples.\n Apesar da simplicidade, os scripts em Perl podem executar tarefas complexas.\n Primeiro, crie uma pasta chamada scripts-perl no diretório raiz c:. Abre o seu editor de texto preferido para criarmos o primeiro script em Perl. Crie um novo arquivo e insira o código abaixo:  #!/usr/bin/perl use warnings; print(\u0026#34;Olá, Mundo!\\n\u0026#34;);  Salve o arquivo com o nome hello.pl dentro do diretório scripts-perl.  Executando um script em Perl Para executar um script em Perl, abra um prompt de comando no Windows.\nNavegue até a pasta onde o script se encontra.\nNo nosso caso a pasta se encontra em c:\\scripts-perl. Para posicionar o prompt dentro dessa pasta, digite o comando cd c:\\scripts-perl e pressione a tecla Enter.\n Execute o comando:\nperl hello.pl Saída:\nOlá, Mundo Se você conseguiu ver esse resultado no prompt de comando, parabéns você acaba de criar e executar o seu primeiro script em Perl com sucesso.\nExplicação do script — Em detalhes Vamos analisar cada linha do nosso primeiro programa em Perl para entender como ele funciona.\n#!/usr/bin/perl A primeira linha indica para o shell que esse script deve ser executado usando o interpretador do Perl.\nO endereço /usr/bin/perl é justamente onde fica localizado o interpretador.\nuse warnings; A segunda linha do script inclui um pragma.\nEsse pragma indica para o interpretador do Perl que avisos adicionais devem ser exibidos para o usuário quando algo acontecer no código.\nOutro pragma importante muito usado no Perl é o use stricts. Veremos mais sobre ele no decorrer do tutorial.\n print(\u0026#34;Olá, Mundo!\\n\u0026#34;); A terceira linha do script contém uma função chamada print.\nEssa função coloca um valor na tela.\nNesse caso, o valor é o que estiver dentro dos parenteses.\n\u0026quot;Olá, Mundo!\\n\u0026quot; representa uma string em Perl.\nAs string em Perl são colocadas entre aspas \u0026quot;\u0026quot;.\nNo decorrer do tutorial, você aprenderá tudo sobre strings em Perl.\nA sequência \\n dentro da string representa uma nova linha para o Perl.\nO \\n é conhecido como sequência de escape, do inglês escape sequence.\n"
},
{
	"uri": "https://perl.dev.br/tutorial/syntax/",
	"title": "Perl - Sintaxe",
	"tags": [],
	"description": "",
	"content": "Perl possui uma sintaxe muito simples e direta.\nVários elementos da linguagem são semelhantes ao idioma inglês.\nVariáveis e valores Em Perl, nós criamos programas para manipular algum tipo de dado.\nO Perl possui diversos tipos diferentes de dados.\nEsses tipos de dados incluem strings, números e dados mais complexos como listas.\nExemplo:\n\u0026#34;Programando em Perl\u0026#34; 120 1.2 Um dos conceitos mais importantes em programação é a reusabilidade.\nPara reusar valores nós precisamos armazená-los em algum lugar.\nEm Perl, nós usamos variáveis para armazenar valores, reusá-los e processá-los.\nExemplo:\n$name = \u0026#34;Peter\u0026#34;; $x = 10; $z = 10.567; No exemplo anterior:\n A variável $name possui um valor do tipo string, A variável $x possui um valor do tipo número inteiro, E a variável $z possui um valor do tipo número de ponto flutuante.  Expressões em Perl Uma expressão em Perl, é qualquer coisa que retorne um valor.\nUma expressão em Perl pode ser desde um número literal até uma chamada de função.\nExemplo:\n10 O número literal 10 é considerado uma expressão em Perl que retorna o mesmo valor, 10.\nExemplo:\n$num1 + $num2 $num1 + $num2 é uma expressão em Perl que retorna a soma dos valores das variáveis $num1 e $num2.\nUma expressão em Perl pode ser usada em um outra expressão maior ou em uma instrução.\n Instruções em Perl Uma instrução em Perl é composta por expressões.\nUma instrução em Perl deve ser finalizada por um ponto e vírgula ;.\nExemplo:\n$num1 = 10; $num2 = 20; $total = $num1 + $num2; print($total); Saída:\n30 Cada linha do código de exemplo representa uma instrução em Perl.\nComentários em Perl Para criar um comentário em Perl, inicie a linha com uma hash #\nExemplo:\n# Essa linha é um comentário em Perl. print(\u0026#34;Comentários em Perl.\\n\u0026#34;) Saída:\nComentários em Perl. Comentários em Perl podem ser usados para documentar o código.\nExemplo:\n# Define uma variável com o valor do salários do funcionário. $salary = 1220; # Imprimi o salário atual. print(\u0026#34;Salário atual: \u0026#34; . $salary . \u0026#34;\\n\u0026#34;); # Aumenta em 10% o salário atual. $salary = $salary * 1.10; # Imprimi o salário com o aumento de 10%. print(\u0026#34;Salário atual com aumento: \u0026#34; . $salary . \u0026#34;\\n\u0026#34;); Saída:\nSalário atual: 1220 Salário atual com aumento: 1342 Também é possível usar comentários na mesma linha.\nExemplo:\nprint(\u0026#34;Olá, tudo bem?\\n\u0026#34;); # Imprimi uma frase na tela. Saída:\nOlá, tudo bem? Blocos Um bloco em Perl é composto por uma ou mais instruções entre parenteses {}.\nExemplo:\n{ $num1 = 10; $num2 = 20; $total = $num1 + $num2; print($total); } Saída:\n30 Blocos em Perl podem ser usados para separar pedaços de códigos reutilizaveis.\nBlocos são importantes para organizar o programa e torná-lo mais simples de entender.\nVariáveis declaradas dentro de um bloco possuem escopo limitado. Somente instruções e expressões de dentro do próprio bloco terão acesso a essas variáveis.\n Espaços em branco Espaços em branco em Perl são compostos por:\n espaços, tabulações, novas linhas, ou uma combinação desses elementos.  Espaços em branco em Perl são usados para deixar o código mais legível.\nO interpretador do Perl ignora os espaços em branco.\nExemplo:\n$num1 = 10; $num2=20; $num3 =30; O script acima é válido para o Perl e os espaços em branco não fazem nenhuma diferença para o interpretador.\nSempre use espaços em branco para tornar o seu código mais legível e fácil de compreender.\n Palavras-chave Em programação, uma palavra-chave é um termo reservado pela linguagem.\nUma palavra-chave pode significar uma função interna, um comando, um pragma ou possuir outro significado especial.\nPalvras-chave da linguagem de programação, normalmente, não podem ser reutilizadas pelo usuário.\nPor exemplo, o Perl possui a palavra-chave print reservada para a função print().\nNão seria uma boa escolha nomear uma variável como $print ou criar uma função usando o mesmo nome.\nIsso pode gerar confusão se algo de errado ocorrer no seu código.\nVocê pode também sobreescrever alguma função importante interna da linguagem.\nVale ressaltar que muitas linguagens de programação não permitem que os usuários sobreescrevam palavras reservadas, justamente para evitar confusão com os termos internos.\n  Veja também\nPalavras-chave do Perl: Referência Completa\u0026nbsp;\r\n "
},
{
	"uri": "https://perl.dev.br/tutorial/variables/",
	"title": "Perl - Variáveis",
	"tags": [],
	"description": "",
	"content": "Variáveis em Perl são usadas para armazenar dados.\nUma variável é um recursos excencial para qualquer linguagem de programação.\nO Perl fonece três tipos de variáveis:\n Scalars, Listas, e Hashes.  Nesse tutorial nós vamos aprender sobre o tipo Scalar.\n Criando uma variável Uma variável em Perl é criada usando o cifrão $ seguido pelo identificador da variável e um valor de atribuição.\nAssim que um valor é atribuido para a variável, ela é criada pelo Perl.\nExemplo:\n$name = \u0026#34;Richard\u0026#34;; $age = 26; print(\u0026#34;Nome: \u0026#34; . $name . \u0026#34;\\n\u0026#34;); print(\u0026#34;Idade: \u0026#34; . $age . \u0026#34;\\n\u0026#34;); Saída:\nNome: Richard Idade: 26 Variáveis em Perl não possuem um tipo fixo.\nÉ possível alterar o tipo de dado da variável em tempo real.\n# $var contém um dado do tipo String. $var = \u0026#34;Richard\u0026#34;; print($var); # Agora $var contém um dado do tipo número inteiro. $var = 10; print($var); Saída:\nRichard 10 Variáveis Scalar em Perl Uma variável Scalar em Perl é usada para manipular valores do tipo número e string.\nExemplo:\n$name = \u0026#34;Jorge\u0026#34;; Para criar uma variável Scalar válida em Perl é necessário:\n Inserir um cifrão $ no ínicio, Seguido por uma letra ou um sublinhado, Seguido por qualquer combinação de letras, números ou sublinhados, O comprimento máximo para o nome da variável é de 255 caracteres.  O exemplo a seguir contém nomes válidos de variáveis em Perl.\nExemplo:\n$name = \u0026#34;Richard\u0026#34;; $full_name = \u0026#34;Richard Bela\u0026#34;; $_10 = 10; $__port__to__use__ = 80; print(\u0026#34;Nome: $name\\n\u0026#34;); print(\u0026#34;Nome completo: $full_name\\n\u0026#34;); print(\u0026#34;Valor: $_10\\n\u0026#34;); print(\u0026#34;Porta: $__port__to__use__\\n\u0026#34;); Saída:\nNome: Richard Nome completo: Richard Bela Valor: 10 Porta: 80  O código abaixo apresenta nomes inválidos de variáveis em Perl.\n $full-name = \u0026#34;Richard Bela\u0026#34;; $10 = 10; $port to use = 80; print(\u0026#34;Nome completo: $full-name\\n\u0026#34;); print(\u0026#34;Valor: $10\\n\u0026#34;); print(\u0026#34;Porta: $port to use__\\n\u0026#34;); Os identificadores de variáveis do exemplo anterior são considerados inválidos pelas seguintes razões:\n $full-name possui um sinal de subtração - no meio do identificador, $10 inicia o nome da variável com um número, o que não é permitido, $port to use inclui espaços em branco no nome da variável, o que também gera um erro.  Como dever de casa, tente consertar o código anterior e alterar os identificadores das variáveis para nomes válidos em Perl.\n Criando variáveis com o comando \u0026ldquo;my\u0026rdquo; em Perl O Perl permite criar variável conforme a necessidade do programador.\nUma variável em Perl não precisa ser declarada explicitamente.\nPorém, essa liberdade pode gerar erros de programação.\nExemplo:\n$name = \u0026#34;Richard\u0026#34;; print(\u0026#34;Meu nome é $nayme\\n\u0026#34;); Saída:\nMeu nome é No exemplo anterior, o identificador nayme usado como argumento para a função print está errado.\nMesmo assim o interpretador do Perl tentou acessar o valor contido na variável nayme.\nA variável nayme não existe, mas mesmo assim o interpretador do Perl executou o script.\nPara evitar situações como essa basta indicar para o interpretador do Perl que as variáveis devem ser declaradas explicitamente.\nUsando o pragma use strict logo no ínicio do script, o interpretador do Perl checa se as variáveis usadas foram declaradas e existem no contexto do programa.\nExemplo:\n#!/usr/bin/perl use strict; my $name = \u0026#34;Richard\u0026#34;; print(\u0026#34;Meu nome é $nayme\\n\u0026#34;); Saída:\nGlobal symbol \u0026#34;$nayme\u0026#34; requires explicit package name (did you forget to declare \u0026#34;my $nayme\u0026#34;?) at script.pl line 6. Execution of script.pl aborted due to compilation errors. Agora o interpretador gera um erro e indica qual foi a variável que interferiu na execução do script.\nApós iniciar o seu script com o pragma use strict é necessário criar as variáveis usando o comando my.\n Ao usar o comando my não é necessário atribuir um valor imediatamente para a variável.\nExemplo:\n#!/usr/bin/perl use strict; my $name; $name = \u0026#34;Richard\u0026#34;; print(\u0026#34;Meu nome é $name\\n\u0026#34;); Saída:\nMeu nome é Richard "
},
{
	"uri": "https://perl.dev.br/",
	"title": "Aprenda Perl",
	"tags": [],
	"description": "",
	"content": "Aprenda Perl Este tutorial cobre os aspectos mais fundamentais do Perl para aqueles que querem aprender como liberar todo o potencial dessa linguagem de programação poderosa e estabelecida.\n Não importa se você está apenas começando em Perl ou é um programador experiente, esse tutorial é para você.\nEste tutorial começará com o básico de Perl e avançará para um nível mais profissional. Aprender Perl é fácil, então você não precisa se preocupar com isso. As lições são pequenas e curtas para permitir que você aprenda no seu próprio ritmo.\n"
},
{
	"uri": "https://perl.dev.br/categories/",
	"title": "Categories",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://perl.dev.br/tags/",
	"title": "Tags",
	"tags": [],
	"description": "",
	"content": ""
}]